// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//auth model
model User {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  password     String
  role         UserRole @default(PLAYER) // [PLAYER, SCOUT]
  playerProfileId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  playerProfile PlayerProfile?
  uploadedVideos UploadedVideo[]
  scoutReports ScoutReport[]
}

enum UserRole {
  PLAYER
  SCOUT
}

//player profile model
model PlayerProfile {
  id           String  @id @default(uuid())
  userId       String  @unique
  age          Int
  position     String
  club         String?
  nationality  String?
  speed        Float?
  dribbling    Float?
  passing      Float?
  shooting     Float?
  defending    Float?

  // Relations
  user         User @relation(fields: [userId], references: [id])
  performanceMetrics PerformanceMetrics[]
  uploadedVideos UploadedVideo[]
  scoutReports ScoutReport[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UploadedVideo {
  id           String  @id @default(uuid())
  userId       String
  playerProfileId String?
  videoUrl     String
  status       VideoStatus @default(PENDING) // [PENDING, PROCESSING, ANALYZED]
  processedData AIAnalysisData?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User @relation(fields: [userId], references: [id])
  playerProfile PlayerProfile? @relation(fields: [playerProfileId], references: [id])
}

enum VideoStatus {
  PENDING
  PROCESSING
  ANALYZED
}

model AIAnalysisData {
  id           String  @id @default(uuid())
  videoId      String  @unique
  detectedPlayerId String
  trackingData Json // Stores bounding box coordinates, movements
  keyEvents    Json // Stores AI-detected passes, shots, tackles, etc.
  createdAt    DateTime @default(now())

  // Relations
  uploadedVideo UploadedVideo @relation(fields: [videoId], references: [id])
}
model PerformanceMetrics {
  id            String  @id @default(uuid())
  playerProfileId String
  speed         Float
  dribbling     Float
  passing       Float
  shooting      Float
  agility       Float
  stamina       Float
  intelligence  Float
  createdAt     DateTime @default(now())

  // Relations
  playerProfile PlayerProfile @relation(fields: [playerProfileId], references: [id])
}

model ScoutReport {
  id           String  @id @default(uuid())
  scoutId      String
  playerProfileId String
  rating       Float
  comments     String?
  createdAt    DateTime @default(now())

  // Relations
  scout        User @relation(fields: [scoutId], references: [id])
  playerProfile PlayerProfile @relation(fields: [playerProfileId], references: [id])
}
